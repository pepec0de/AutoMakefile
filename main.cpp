#include <iostream>
#include <dirent.h>
#include <string.h>
#include <vector>
#include <fstream>

using namespace std;

/*vector<string> listDir(const char* ext) {
    if (auto dir = opendir(strDir)) {
        while (auto f = readdir(dir)) {
            if (!f->d_name) continue;
            char path[1000];
            strcpy(path, strDir);
            strcat(path, "\\");
            strcat(path, f->d_name);
            if (opendir(path)) {
                cout << "Directory: " << f->d_name << endl;
                if (strcmp(f->d_name, ".") != 0 && strcmp(f->d_name, "..") != 0) {
                    cout << "List of files in: " << f->d_name << endl;
                    listDir(path);
                }
            } else {
                cout << "File: " << f->d_name << endl;
            }
        }
        closedir(dir);
    }
}

void listDir(const char* strDir) {
    if (auto dir = opendir(strDir)) {
        while (auto f = readdir(dir)) {
            if (!f->d_name) continue;
            char path[1000];
            strcpy(path, strDir);
            strcat(path, "\\");
            strcat(path, f->d_name);
            if (opendir(path)) {
                cout << "Directory: " << f->d_name << endl;
                if (strcmp(f->d_name, ".") != 0 && strcmp(f->d_name, "..") != 0) {
                    cout << "List of files in: " << f->d_name << endl;
                    listDir(path);
                }
            } else {
                cout << "File: " << path << endl;
                cout << (hasExtension(f->d_name, "cpp") ? "ES CPP" : "NO ES CPP") << endl;
            }
        }
        closedir(dir);
    }
}*/

bool hasExtension(const char* file, const char* ext) {
    char extGet[10];
    bool dotFound = false;
    int c = 0;
    for (int i = 0; i < (int)strlen(file); i++) {
        if (dotFound) {
            extGet[c] = file[i];
            c++;
        }
        if (file[i] == '.') dotFound = true;
    }
    extGet[c] = '\0';
    bool result = false;
    if (dotFound) {
        if (strcmp(extGet, ext) == 0) {
            result = true;
        }
    }
    return result;
}

void getFilesToCompile(const char* path, vector<string> &sources, vector<string> &headers) {
    if (auto dir = opendir(path)) {
        while (auto f = readdir(dir)) {
            if (!f->d_name) continue;
            char path1[1000];
            strcpy(path1, path);
            strcat(path1, "\\");
            strcat(path1, f->d_name);
            if (opendir(path1)) {
                //cout << "Directory: " << f->d_name << endl;
                if (strcmp(f->d_name, ".") != 0 && strcmp(f->d_name, "..") != 0) {
                    //cout << "List of files in: " << f->d_name << endl;
                    getFilesToCompile(path1, sources, headers);
                }
            } else {
                //cout << "File: " << path << endl;
                string result = "";
                if (hasExtension(f->d_name, "cpp")) {
                    for (char c : f->d_name) {
                        if (c == '.') break;
                        result.push_back(c);
                    }
                    sources.push_back(result);
                } else if (hasExtension(f->d_name, "h") || hasExtension(f->d_name, "hpp")) {
                    for (char c : f->d_name) {
                        if (c == '.') break;
                        result.push_back(c);
                    }
                    headers.push_back(result);
                }
            }
        }
        closedir(dir);
    }
}

int main(int argc, char **argv) {
	char includeDir[1000];
	char srcDir[1000];
	char buildDir[1000];
	char outputDir[1000];
	char output[100];
	char CC[10];
	char CFLAGS[100];

	char* path = ".";
	vector<string> sources, headers, classes;
    getFilesToCompile(path, sources, headers);
    for (string src : sources) {
        for (string h : headers) {
            if (src == h) {
                classes.push_back(src);
                break;
            }
        }
    }
    for (string str : classes) {
        cout << str << endl;
    }
	strcpy(includeDir, "include");
	strcpy(srcDir, "src");
	strcpy(buildDir, "obj");
	strcpy(outputDir, "bin");
	strcpy(output, "App.exe");
	strcpy(CC, "g++");
	strcpy(CFLAGS, "-std=c++11 -Wall -Weffc++ -pedantic");


    ofstream f("Makefile");
    f << "# Makefile generated by MakefileSetup.exe\n"
      << "CC := " << CC << "\nCFLAGS := " << CFLAGS
      << "\n\nSRCDIR := " << srcDir
      << "\nINCDIR := " << includeDir
      << "\nBUILDDIR := " << buildDir
      << "\nOUTPUTDIR := " << outputDir
      << "\n\nTARGET := $(OUTPUTDIR)\\" << output
      << "\n\nall: $(TARGET)"
      << "\n\n$(TARGET): $(BUILDDIR)\\main.o $(BUILDDIR)\\";
    for (int i = 0; i < classes.size(); i++) {
        f << classes[i] << (i < classes.size()-1 ? ".o $(BUILDDIR)\\" : ".o\n");
    }
    f << "\t$(CC) $(CFLAGS) $^ -o $(TARGET)\n\n";
    f << "$(BUILDDIR)\\main.o: main.cpp\n";
    f << "\t$(CC) -c main.cpp -o $(BUILDDIR)\\main.o\n\n";
    for (string str : classes) {
        f << "$(BUILDDIR)\\" << str <<".o: $(SRCDIR)\\" << str << ".cpp $(INCDIR)\\" << str << ".h\n";
        f << "\t$(CC) -c $(SRCDIR)\\" << str << ".cpp -o $(BUILDDIR)\\" << str << ".o\n\n";
    }

    f << "clean:\n"
	<< "\t@erase $(BUILDDIR)\\*.o\n"
	<< "\t@erase $(TARGET)\n";
    f.close();
	return 0;
}
